@page "/detalles-meta/{MetaId:int}"
@inject IRepositorio repositorio
@inject IMostrarMensaje mostrarMensajes
@inject NavigationManager navigationManager
@inject IJSRuntime JS

@if (Model == null)
{
    <text>Cargando...</text>
}
else
{
    <div class="row no-gutters">
        <div class="col-lg-8 pr-lg-2 mb-3">
            <div class="card mb-3">
                <div class="card-body">
                    <div class="row justify-content-between align-items-center">
                        <div class="col">
                            <div class="d-flex">
                                <div class="flex-1 fs--1">
                                    <h5 class="fs-0">@Model.Nombre</h5>
                                    <p class="mb-0 text-500">
                                        Fecha de Creación:
                                        <span class="text-primary">
                                            @if (Model.FechadeCreacion != null)
                                            {
                                                @Model.FechadeCreacion.Value.ToString("dd/MM/yyyy")
                                            }
                                        </span>
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-auto mt-4 mt-md-0">
                            <button class="btn btn-outline-dark btn-sm me-2" type="button" @onclick="MostrarModal">Crear Tarea</button>
                        </div>
                    </div>

                    <br />
                  
                    @if (ListadeTareas != null)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-sm table-hover table-bordered text-center">
                                <thead>
                                    <tr>
                                        <th>Nombre</th>
                                        <th>Fecha de Cración</th>
                                        <th>Acciones</th>
                                        <th>Estado</th>
                                        <th>Importante</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in ListadeTareas)
                                    {
                                        <tr>
                                            <td>
                                                @item.Nombre
                                            </td>
                                            <td>
                                                @if (item.FechadeCreacion != null)
                                                {
                                                    @item.FechadeCreacion.Value.ToString("dd/MM/yyyy")
                                                }
                                            </td>
                                            <td>
                                                <button class="btn p-0" type="button" data-bs-toggle="tooltip" data-bs-placement="top" title="Editar" @onclick="@(() => ObtenerTarea(item.TareaId))">
                                                    <span class="text-500 fas fa-edit" />
                                                </button>
                                                <button class="btn p-0 ms-2" type="button" data-bs-toggle="tooltip" data-bs-placement="top" title="Borrar" @onclick="@(() => BorrarTarea(item))">
                                                    <span class="text-500 fas fa-trash-alt"></span>
                                                </button>
                                            </td>
                                            <td>
                                                @if (item.Es_Completada)
                                                {
                                                    <span class="badge rounded-pill bg-success text-white manita">
                                                        <span class="fa fa-check"></span>
                                                        &nbsp;Completada
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge rounded-pill bg-danger text-white manita" @onclick="(()=> CompletarTarea(item))">
                                                        <span class="fa fa-times"></span>
                                                        &nbsp;Sin Completar
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                @if (item.Es_Importante)
                                                {
                                                    <span class="fas fa-star manita" style="color:yellow"></span>
                                                }
                                                else
                                                {
                                                    <span class="fas fa-star manita" style="color:gray" @onclick="(()=> MarcarImportante(item))"></span>
                                                }
                                            </td>
                                        </tr>                                        
                                    }
                                </tbody>
                            </table>
                        </div>
                    }


                    @*@if (ListadeTareas != null)
                        {
                            <div class="progress-bar progress-bar-striped progress-bar-animated my-2" role="progressbar" style="width:@(PercentageCompleted)%" aria-valuemax="100" aria-valuemin="0">
                                @(PercentageCompleted)%
                            </div>
                        }
                        <Lista Class="list-group list-group-flush my-2">
                            @if (ListadeTareas != null)
                            {
                                @foreach (var taskitem in ListadeTareas)
                                {
                                    @if (taskitem.Es_Completada)
                                    {
                                        //si la tarea esta completada se pone en verde y subrayado
                                        <ListaItem Class="list-group-item d-flex justify-content-between align-items-center mx-1 manita">
                                            <h5 style="color: #198754">@taskitem.Nombre</h5>
                                            <span class="badge rounded-pill bg-success text-white">
                                                <span class="fa fa-check"></span>
                                                &nbsp;Completada
                                            </span>
                                        </ListaItem>
                                    }
                                    else
                                    {
                                        //si la tarea no esta completa se agrega en gris
                                        <ListaItem Class="list-group-item d-flex justify-content-between align-items-center mx-1 manita" @onclick="(()=> Autorizar(taskitem))">
                                            @taskitem.Nombre
                                            <span class="badge rounded-pill bg-danger text-white">
                                                <span class="fa fa-times"></span>
                                                &nbsp;Sin Completar
                                            </span>
                                        </ListaItem>
                                    }
                                }
                            }
                        </Lista>*@

                </div>
            </div>
        </div>
        <div class="col-lg-4 pl-lg-2 mb-3">
            <div class="card mb-3 fs--1">
                <div class="card-body">
                    <h5>Avance de Tareas</h5>
                    @if (ListadeTareas != null)
                    {
                        <div class="progress-bar progress-bar-striped progress-bar-animated my-2" role="progressbar" style="width:@(PercentageCompleted)%" aria-valuemax="100" aria-valuemin="0">
                            @(PercentageCompleted)%
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
}

<!--<ModalContent EsVisible="VerModal" BotonesModal="ModalContent.TiposdeBoton.BotonOnclick" OnClose="closeModal" Titulo="Crear Tareas" MetodoOnclick="CrearTarea">
    <div class="form-row">
        <div class="col-sm-3">
            <div class="form-group">
                <label for="nombretarea">Nombre de la Tarea</label>
                <input type="text" class="form-control form-control-sm" id="nombretarea" placeholder="Tarea" @bind-value="@Tarea.Nombre"/>-->
@*<ValidationMessage For="@(() => Tarea.Nombre)" />*@
<!--</div>
        </div>
    </div>
</ModalContent>-->

@if (VerModal)
{
    <div class="modal bd-example-modal-lg" id="authentication-modal" tabindex="-1" role="dialog" aria-labelledby="authentication-modal-label" aria-modal="true" style="display:block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Crear Tareas</h5>
                    <button type="button" class="btn bg-simsa" data-bs-dismiss="modal" aria-label="Close"
                            style="margin: -0.5rem -0.5rem -0.5rem auto;" @onclick="closeModal">
                        <span class="fas fa-times" aria-hidden="true"></span>
                    </button>
                </div>
                <div class="modal-body">

                    <div class="form-row">
                        <div class="col-sm-12">
                            <div class="form-group">
                                <label for="nombretarea">Nombre de la Tarea</label>
                                <input type="text" class="form-control form-control-sm" id="nombretarea" placeholder="Tarea" @bind-value="@Tarea.Nombre" />
                                @*<ValidationMessage For="@(() => Tarea.Nombre)" />*@
                            </div>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-sm btn-secondary" @onclick="closeModal">Cerrar</button>
                    @if (Es_EditarTarea == true)
                    {
                        <button type="button" class="btn btn-sm btn-info" @onclick="EditarTarea">Editar</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-sm btn-success" @onclick="CrearTarea">Guardar</button>
                    }
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter] public int MetaId { get; set; }
    public Meta Model { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await CargarDetalles();
        await CargarTareas();
    }

    private async Task CargarDetalles()
    {
        var responseHttp = await repositorio.Get<Meta>($"api/Meta/{MetaId}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("");
            }
            else
            {
                var mensajeError = await responseHttp.GetBody();
                await mostrarMensajes.MostrarMensajeError(mensajeError);
            }
        }
        else
        {
            Model = responseHttp.Response;
        }
    }

    private Boolean VerModal = false;

    public void MostrarModal()
    {
        VerModal = true;
        Es_EditarTarea = false;
    }

    private void closeModal()
    {
        VerModal = false;
        Es_EditarTarea = false;
    }

    #region Tareas

    private Tarea Tarea = new Tarea();

    private async Task CrearTarea()
    {
        Tarea.MetaId = MetaId;       

        var httpResponse = await repositorio.Post("api/Tarea", Tarea);
        @if (httpResponse.Error)
        {
            var body = await httpResponse.GetBody();
            await mostrarMensajes.MostrarMensajeError(body);
        }
        else
        {
            await mostrarMensajes.MostrarMensajeExitoso("Tarea Creada");
            navigationManager.NavigateTo($"detalles-meta/{MetaId}");
            //await CargarDetalles();
            await CargarTareas();
            StateHasChanged();
        }
    }

    public List<Tarea> ListadeTareas { get; set; }

    private async Task CargarTareas()
    {
        var responseHttp = await repositorio.Get<List<Tarea>>($"api/Tarea/{MetaId}");
        ListadeTareas = responseHttp.Response;
    }

    Tarea TareaparaEditar;

    public async Task ObtenerTarea(int id)
    {
        VerModal = true;
        Es_EditarTarea = true;

        Console.WriteLine(Es_EditarTarea);

        var httpResponse = await repositorio.Get<Tarea>($"api/Tarea/ObtenerunaTarea/{id}");
        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("indice-metas");
            }
            else
            {
                await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
            }
        }
        else
        {
            Tarea = httpResponse.Response;
        }
    }

    private Boolean Es_EditarTarea = false;

    private async Task EditarTarea()
    {
        TareaparaEditar = Tarea;

        var httpResponse = await repositorio.Put("api/Tarea", TareaparaEditar);
        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            navigationManager.NavigateTo($"detalles-meta/{MetaId}");
            await CargarDetalles();
            await CargarTareas();
            StateHasChanged();
        }
    }

    private async Task BorrarTarea(Tarea tarea)
    {
        string mensajeconfirmacion = "";

        var confirmar = await JS.Confirm($"¿Desea borrar la tarea {tarea.Nombre}?", mensajeconfirmacion, IJSRuntimeExtensionMethods.TipoMensajeSweetAlert.question);
        if (confirmar)
        {
            var responseHttp = await repositorio.Delete($"api/Tarea/{tarea.TareaId}");
            if (responseHttp.Error)
            {
                await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
            }
            else
            {
                ListadeTareas.Remove(tarea);
                await CargarDetalles();
                await CargarTareas();
                StateHasChanged();
            }
        }
    }

    #endregion

    #region TerminarTareas

    public int PercentageCompleted
    {
        get
        {
            //cuentas las tareas que hay en la lista si es mayor a 0, cuentas las tareas completas x 100 entre el total de tareas y te da el porcentaje y sino es mayor a 0 pues es 0
            return ListadeTareas.Count > 0 ? (ListadeTareas.Count(x => x.Es_Completada) * 100 / ListadeTareas.Count) : 0;
        }
    }

    private async Task CompletarTarea(Tarea tarea)
    {
        var httpResponse = await repositorio.Put("api/Tarea/TerminarTarea", tarea);
        @if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            await mostrarMensajes.MostrarMensajeExitoso("Tarea Terminada");
            navigationManager.NavigateTo($"detalles-meta/{MetaId}");
            await CargarDetalles();
            await CargarTareas();
        }
    }

    private async Task MarcarImportante(Tarea tarea)
    {
        var httpResponse = await repositorio.Put("api/Tarea/MarcarImportante", tarea);
        @if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            await mostrarMensajes.MostrarMensajeExitoso("Marcada como Importante");
            navigationManager.NavigateTo($"detalles-meta/{MetaId}");
            await CargarDetalles();
            await CargarTareas();
        }
    }

    #endregion
}

